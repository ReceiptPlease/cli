import * as path from './path.js'
import {
  AbortSilentError,
  CancelExecution,
  errorMapper,
  handler,
} from './error.js'
import { outputInfo} from '../../public/node/output.js'
import {printEventsJson} from '../../private/node/demo-recorder.js'
import {Interfaces} from '@oclif/core'

export function errorHandler(
  error: (CancelExecution | AbortSilentError) & {exitCode?: number | undefined},
  config?: Interfaces.Config,
): void
export function errorHandler(error: Error & {exitCode?: number | undefined}, config?: Interfaces.Config): Promise<void>
export function errorHandler(error: Error & {exitCode?: number | undefined}, config?: Interfaces.Config): unknown {
  if (error instanceof CancelExecution) {
    if (error.message && error.message !== '') {
      outputInfo(`âœ¨  ${error.message}`)
    }
  } else if (error instanceof AbortSilentError) {
    exit(1)
  } else {
    return errorMapper(error)
      .then((error) => {
        return handler(error)
      })
      .then(() => {
        exit(1)
      })
  }
}

function exit(code: number) {
  printEventsJson()
  process.exit(code)
}



/**
 * If the given file path is within a node_modules folder, remove prefix up
 * to and including the node_modules folder.
 *
 * This gives us very consistent paths for errors generated by the CLI.
 */
export function cleanStackFrameFilePath({
  currentFilePath,
  projectRoot,
  pluginLocations,
}: {
  currentFilePath: string
  projectRoot: string
  pluginLocations: {name: string; pluginPath: string}[]
}): string {
  const fullLocation = path.isAbsolutePath(currentFilePath)
    ? currentFilePath
    : path.joinPath(projectRoot, currentFilePath)

  const matchingPluginPath = pluginLocations.filter(({pluginPath}) => fullLocation.indexOf(pluginPath) === 0)[0]

  if (matchingPluginPath !== undefined) {
    // the plugin name (e.g. @shopify/cli-kit), plus the relative path of the error line from within the plugin's code (e.g. dist/something.js )
    return path.joinPath(matchingPluginPath.name, path.relativePath(matchingPluginPath.pluginPath, fullLocation))
  }

  // strip prefix up to node_modules folder, so we can normalize error reporting
  return currentFilePath.replace(/.*node_modules\//, '')
}
